"""
Django settings for sistema_igreja project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-su!_25b!^%x9%g20^!%m(l26w&k3*e1v5*#q!9x3&j9d&1j+r@' # Mantenha esta chave secreta!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # Altere para False em produção!

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'membros', # Sua aplicação personalizada
    # Adicione outras aplicações customizadas aqui se houver, exemplo: 'outra_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sistema_igreja.urls'

import os # <--- ADICIONE ESTA LINHA!
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(f"DEBUG: BASE_DIR is {BASE_DIR}") # <--- ADD THIS LINE TEMPORARILY

# ... o restante do seu settings.py ...

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                ('django.template.loaders.filesystem.Loader', {
                    'templates': None, # <--- Mantenha isso se estiver funcionando
                }),
                ('django.template.loaders.app_directories.Loader', {
                    'templates': None, # <--- E isso
                }),
            ],
        },
    },
]

# Add this at the end of your settings.py (or after TEMPLATES)
# This will print the actual template loaders being used.
try:
    from django.template import engines
    configured_loaders = []
    for engine_alias, engine in engines.all().items():
        if hasattr(engine, 'template_loaders'): # Access directly
            for loader in engine.template_loaders:
                configured_loaders.append(loader)
        elif hasattr(engine, 'loaders'): # If it's the raw list from settings
            for loader_config in engine.loaders:
                # For loader tuples, just add the path for now
                if isinstance(loader_config, tuple):
                    configured_loaders.append(loader_config[0])
                else:
                    configured_loaders.append(loader_config)

    print(f"DEBUG: Configured Template Loaders: {configured_loaders}")
except Exception as e:
    print(f"DEBUG: Error inspecting loaders: {e}")
    
    
# <--- ADD THIS AFTER THE TEMPLATES DICTIONARY, BUT BEFORE WSGI_APPLICATION
print(f"DEBUG: TEMPLATES DIRS is {TEMPLATES[0]['DIRS']}")
WSGI_APPLICATION = 'sistema_igreja.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br' # Definindo o idioma para Português (Brasil)

TIME_ZONE = 'America/Sao_Paulo' # Definindo o fuso horário para São Paulo

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/' # URL para servir arquivos estáticos

# Define o diretório onde o Django procurará por arquivos estáticos COLETADOS (para produção)
# STATIC_ROOT = BASE_DIR / 'staticfiles' # Descomente e ajuste para produção

# Define diretórios adicionais onde o Django procurará por arquivos estáticos durante o desenvolvimento
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Esta linha diz ao Django para procurar na pasta 'static' na raiz do seu projeto
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'